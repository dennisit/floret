/*--------------------------------------------------------------------------
 *  Copyright (c) 2010-2020, dennisit@163.com All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * Neither the name of the suruonian developer nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 *  <dependency>
 *      <groupId>com.github.dennisit</groupId>
 *      <artifactId>floret</artifactId>
 *      <version>1.0.0</version>
 *  </dependency>
 *
 *  The code you see is generated by the generator "floret".
 *  // 生成路径
 *  String destPath = "/gen/";
 *  // 代码生成
 *  new FloretStrap().scanAnnoBorn(Settings.LOCATION_PATTERN, Settings.ACCEPT_SUFFIX, "com.dennisit", destPath, "UTF-8");
 *--------------------------------------------------------------------------
 */
package ${bean.packageName}.service;

import com.wuyu.plugin.floret.ext.pager.Page;
import ${bean.packageName}.domain.${bean.className};

import java.util.List;
import java.util.Set;

public interface ${bean.className}Service {

    /**
     * 入库并返回主键
     * @param obj
     * @return 返回影响的行数
     */
    public int insert(${bean.className} obj);

    /**
     * 更新对象,依赖对象主键
     * @param obj
     * @return 返回影响的行数
     */
    public int update(${bean.className} obj);

    /**
     * 删除对象, 依赖对象主键
     * @param primaryKey
     * @return 返回影响的行数
     */
    public int delete(java.lang.Long primaryKey);

    /**
     * 删除对象, 依赖对象主键集合
     * @param primaryKeys
     * @return 返回影响的行数
     */
    public int deleteMulti(Set<Long> primaryKeys);

    /**
     * 根据条件删除对象
     * @param obj
     * @return 返回影响的行数
     */
    public int deleteList(${bean.className} obj);

    /**
     * 根据条件查询对象
     * @param obj
     * @return 返回符合条件的行数
     */
    public long count(${bean.className} obj);

    /**
     * 根据主键查询对象
     * @param primaryKey
     * @return 返回主键对应的对象
     */
    public ${bean.className} select(java.lang.Long primaryKey) ;

    /**
     * 根据主键集查询对象
     * @param primaryKeys
     * @return 返回主键集对应的对象
     */
    public List<${bean.className}> selectMulti(Set<java.lang.Long> primaryKeys) ;

    /**
     * 根据条件查询对象
     * @param obj
     * @return 返回符合条件的对象集
     */
    public List<${bean.className}> selectList(${bean.className} obj) ;

    /**
     * 根据条件分页查询对象
     * @param obj
     * @param
     * @return 返回符合条件的page对象集
     */
    public Page<${bean.className}> selectPage(${bean.className} obj, long offset, int size);
}