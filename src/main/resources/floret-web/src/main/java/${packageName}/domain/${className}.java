/*--------------------------------------------------------------------------
 *  Copyright (c) 2010-2020, dennisit@163.com All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * Neither the name of the suruonian developer nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 *  <dependency>
 *      <groupId>com.github.dennisit</groupId>
 *      <artifactId>floret</artifactId>
 *      <version>1.0.0</version>
 *  </dependency>
 *
 *  The code you see is generated by the generator "floret".
 *  // 生成路径
 *  String destPath = "/gen/";
 *  // 代码生成
 *  new FloretStrap().scanAnnoBorn(Settings.LOCATION_PATTERN, Settings.ACCEPT_SUFFIX, "com.dennisit", destPath, "UTF-8");
 *--------------------------------------------------------------------------
 */
package ${bean.packageName}.domain;

import com.wuyu.plugin.floret.anno.FloretField;
import com.wuyu.plugin.floret.anno.FloretTable;

import java.io.Serializable;

@FloretTable(tableName = "${bean.tableName}")
public class ${bean.className} implements Serializable {

<%
   for(entry in bean.primaryAttributeContext){
%>
    @FloretField(columnName = "${entry.value.columnName}", displayName = "${entry.value.displayName}", isPrimary = true)
    private ${entry.value.attributeType} ${entry.key};

<%
    }
%>
<%
    for(entry in bean.plainAttributeContext){
%>
    @FloretField(columnName = "${entry.value.columnName}", displayName = "${entry.value.displayName}")
    private ${entry.value.attributeType} ${entry.key};

<%
    }
%>
    private static final long serialVersionUID = 1L;

<%
    for(entry in bean.primaryAttributeContext){
%>
    public ${entry.value.attributeType} get${nameUtil.firstToUpper(entry.key)}() {
        return ${entry.key};
    }

    public void set${nameUtil.firstToUpper(entry.key)}(${entry.value.attributeType} ${entry.key}) {
        this.${entry.key} = ${entry.key};
    }

<%
    }
%>
<%
    for(entry in bean.plainAttributeContext){
%>
    public ${entry.value.attributeType} get${nameUtil.firstToUpper(entry.key)}() {
        return ${entry.key};
    }

    public void set${nameUtil.firstToUpper(entry.key)}(${entry.value.attributeType} ${entry.key}) {
        this.${entry.key} = ${entry.key};
    }

<%
    }
%>
}