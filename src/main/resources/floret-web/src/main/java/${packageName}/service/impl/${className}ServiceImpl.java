/*--------------------------------------------------------------------------
 *  Copyright (c) 2010-2020, dennisit@163.com All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright
 * notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * Neither the name of the suruonian developer nor the names of its
 * contributors may be used to endorse or promote products derived from
 * this software without specific prior written permission.
 *
 *  <dependency>
 *      <groupId>com.github.dennisit</groupId>
 *      <artifactId>floret</artifactId>
 *      <version>1.0.0</version>
 *  </dependency>
 *
 *  The code you see is generated by the generator "floret".
 *  // 生成路径
 *  String destPath = "/gen/";
 *  // 代码生成
 *  new FloretStrap().scanAnnoBorn(Settings.LOCATION_PATTERN, Settings.ACCEPT_SUFFIX, "com.dennisit", destPath, "UTF-8");
 *--------------------------------------------------------------------------
 */
package ${bean.packageName}.service.impl;

import com.alibaba.fastjson.JSON;
import com.wuyu.plugin.floret.ext.pager.Page;
import ${bean.packageName}.repository.${bean.className}Dao;
import ${bean.packageName}.domain.${bean.className};
import ${bean.packageName}.service.${bean.className}Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import javax.annotation.Resource;
import java.util.List;
import java.util.Set;

@Service(value = "${nameUtil.firstToLower(bean.className)}Service")
public class ${bean.className}ServiceImpl implements ${bean.className}Service {

    private static final Logger LOG = LoggerFactory.getLogger(${bean.className}ServiceImpl.class);

    @Resource
    private ${bean.className}Dao ${nameUtil.firstToLower(bean.className)}Dao;

    public int insert(${bean.className} obj) {
        LOG.info("insert\t tmcOrder: {}", JSON.toJSONString(obj));
        return ${nameUtil.firstToLower(bean.className)}Dao.insert(obj);
    }

    public int update(${bean.className} obj) {
        LOG.info("update\t tmcOrder: {}", JSON.toJSONString(obj));
        return ${nameUtil.firstToLower(bean.className)}Dao.update(obj);
    }

    public int delete(Long primaryKey) {
        LOG.info("delete\t primaryKey: {}", primaryKey);
        return ${nameUtil.firstToLower(bean.className)}Dao.delete(primaryKey);
    }

    public int deleteMulti(Set<Long> primaryKeys) {
        LOG.info("deleteMulti\t primaryKeys: {}", primaryKeys);
        return ${nameUtil.firstToLower(bean.className)}Dao.deleteMulti(primaryKeys);
    }

    public int deleteList(${bean.className} obj) {
        LOG.info("deleteList\t tmcOrder: {}", JSON.toJSONString(obj));
        return ${nameUtil.firstToLower(bean.className)}Dao.deleteList(obj);
    }

    public long count(${bean.className} obj) {
        LOG.info("count\t tmcOrder: {}", JSON.toJSONString(obj));
        return ${nameUtil.firstToLower(bean.className)}Dao.count(obj);
    }

    public ${bean.className} select(Long primaryKey) {
        LOG.info("select\t primaryKey: {}", primaryKey);
        return ${nameUtil.firstToLower(bean.className)}Dao.select(primaryKey);
    }

    public List<${bean.className}> selectMulti(Set<Long> primaryKeys) {
        LOG.info("selectMulti\t primaryKeys: {}", primaryKeys);
        return ${nameUtil.firstToLower(bean.className)}Dao.selectMulti(primaryKeys);
    }

    public List<${bean.className}> selectList(${bean.className} obj) {
        LOG.info("selectList\t tmcOrder: {}", JSON.toJSONString(obj));
        return ${nameUtil.firstToLower(bean.className)}Dao.selectList(obj);
    }

    public Page<${bean.className}> selectPage(${bean.className} obj, long pageNum, int pageSize) {
        LOG.info("selectPage\t tmcOrder: {}, pageNum:{}, pageSize:{}", JSON.toJSONString(obj), pageNum, pageSize);
        return ${nameUtil.firstToLower(bean.className)}Dao.selectPagination(obj, (pageNum-1)*pageSize, pageSize);
    }
}
